// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts            Account[]
  sessions            Session[]
  summonerLinks       SummonerLink[]
  championPreferences ChampionPreference[]
  matches             Match[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// App models
model SummonerLink {
  id           String   @id @default(cuid())
  userId       String
  summonerName String
  puuid        String
  region       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, summonerName, region])
  @@index([puuid])
  @@map("summoner_links")
}

model ChampionPreference {
  id          String   @id @default(cuid())
  userId      String
  championId  Int
  rating      Int      @default(0) // -5 to 5 scale
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, championId])
  @@index([championId])
  @@map("champion_preferences")
}

model Match {
  id         String   @id @default(cuid())
  userId     String
  gameId     String   // Riot's game ID
  championId Int
  win        Boolean
  gameStart  DateTime
  duration   Int      // Duration in seconds
  role       String   // e.g., "DUO_CARRY", "JUNGLE", etc.
  lane       String   // e.g., "BOTTOM", "JUNGLE", etc.
  kda        String   // e.g., "5/2/8"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, gameId])
  @@index([championId])
  @@index([win])
  @@index([gameStart])
  @@map("matches")
}
