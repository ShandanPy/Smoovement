name: Sync Status from PR Lifecycle

on:
  workflow_dispatch:
  pull_request:
    types: [opened, reopened, closed, review_requested]
  issues:
    types: [closed, reopened]

jobs:
  sync_status:
    if: ${{ vars.AUTOMATION_ENABLED == '1' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
    steps:
      - name: Resolve linked issues
        id: link
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_PROJECT_TOKEN }}
          script: |
            const isPR = !!context.payload.pull_request;
            if (!isPR && context.payload.issue) {
              core.setOutput('issues', JSON.stringify([context.payload.issue.number]));
              return;
            }
            const body = context.payload.pull_request?.body || '';
            const matches = [...body.matchAll(/(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s+#(\d+)/ig)].map(m=>Number(m[1]));
            core.setOutput('issues', JSON.stringify([...new Set(matches)]));
      - name: Stop if none linked
        if: ${{ steps.link.outputs.issues == '[]' }}
        run: echo "No linked issues."

      - name: Get Execution project & Status field IDs (user project)
        id: meta
        if: ${{ steps.link.outputs.issues != '[]' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_PROJECT_TOKEN }}
          script: |
            const login = process.env.ORG_LOGIN;
            const number = parseInt(process.env.REPO_EXEC_NUMBER, 10);
            const q = `query($login:String!, $number:Int!){
              user(login:$login){
                projectV2(number:$number){
                  id
                  fields(first:50){
                    nodes{
                      ... on ProjectV2FieldCommon { id name }
                      ... on ProjectV2SingleSelectField { id name options { id name } }
                    }
                  }
                }
              }
            }`;
            const r = await github.graphql(q, { login, number });
            const proj = r.user?.projectV2;
            if (!proj?.id) core.setFailed('Execution project not found.');
            const status = proj.fields.nodes.find(f => f.name === 'Status');
            if (!status) core.setFailed('Status field not found on Execution project.');
            const map = Object.fromEntries(status.options.map(o => [o.name, o.id]));
            core.setOutput('projectId', proj.id);
            core.setOutput('statusFieldId', status.id);
            core.setOutput('todo',  map['To do']);
            core.setOutput('prog',  map['In progress']);
            core.setOutput('rev',   map['In review']);
            core.setOutput('done',  map['Done']);

      - name: Update Status on Execution project
        if: ${{ steps.link.outputs.issues != '[]' && steps.meta.outputs.projectId }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_PROJECT_TOKEN }}
          script: |
            const projectId = '${{ steps.meta.outputs.projectId }}';
            const fieldId   = '${{ steps.meta.outputs.statusFieldId }}';
            const issues    = JSON.parse('${{ steps.link.outputs.issues }}');
            const event     = context.payload.action;
            const merged    = context.payload.pull_request?.merged === true;

            let optionId = null;
            if (event === 'opened' || event === 'reopened') optionId = '${{ steps.meta.outputs.prog }}';
            if (event === 'review_requested')               optionId = '${{ steps.meta.outputs.rev }}';
            if (event === 'closed')                         optionId = merged ? '${{ steps.meta.outputs.done }}' : '${{ steps.meta.outputs.todo }}';
            if (context.payload.issue && (event === 'closed' || event === 'reopened')) {
              optionId = event === 'closed' ? '${{ steps.meta.outputs.done }}' : '${{ steps.meta.outputs.todo }}';
            }
            if (!optionId) { core.info('No status change for this event.'); return; }

            // helper: find the project item for a given issue number
            const findItem = async (issueNumber) => {
              const login = process.env.ORG_LOGIN;
              const number = parseInt(process.env.REPO_EXEC_NUMBER, 10);
              const q = `query($login:String!, $number:Int!, $needle:String!){
                user(login:$login){
                  projectV2(number:$number){
                    items(first:100, query:$needle){
                      nodes { id content { ... on Issue { number } } }
                    }
                  }
                }
              }`;
              const r = await github.graphql(q, { login, number, needle: String(issueNumber) });
              const nodes = r.user.projectV2.items.nodes;
              return nodes.find(n => n.content?.number === issueNumber)?.id;
            };

            for (const n of issues) {
              const itemId = await findItem(n);
              if (!itemId) { core.info(`No Execution project item for issue #${n}`); continue; }
              const m = `mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $opt:String!){
                updateProjectV2ItemFieldValue(input:{
                  projectId:$projectId, itemId:$itemId, fieldId:$fieldId,
                  value:{ singleSelectOptionId:$opt }
                }){ projectV2Item { id } }
              }`;
              await github.graphql(m, { projectId, itemId, fieldId, opt: optionId });
            }
    env:
      ORG_LOGIN: ${{ vars.ORG_LOGIN }}
      REPO_EXEC_NUMBER: ${{ vars.REPO_EXEC_NUMBER }}
